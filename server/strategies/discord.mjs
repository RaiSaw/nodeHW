import passport from "passport";
import { Strategy } from "passport-discord";
import { DiscordUser } from "../mongoose/discord.mjs";

passport.serializeUser((user, done) => {
	/* console.log(`Inside serialize user: ${user}`) */
	done(null, user.id);
});

passport.deserializeUser( async(id, done) => { //1st arg = serialize done 2nd arg
	try {
		const findUser = await DiscordUser.findById(id);
		return findUser ? done(null, findUser) : done(null, null);
	} catch (err) {
		done(err, null);
	}
});

export default passport.use(
	new Strategy(
		{
			clientID: process.env.ID,
			clientSecret: process.env.DC,
			callbackURL: "http://localhost:3000/auth/discord/redirect",
			scope: ["identify"/* , "guilds", "email" */], //access cl info dpends on 3rd-party [type of fields]
		},
		async (accessToken, refreshToken, profile, done) => { //AT & RF generated by passport
			let findUser;
			try {
				findUser = await DiscordUser.findOne({ discordId: profile.id });
			} catch (err) {
				return done(err, null);
			}
			try {
				if (!findUser) {
					const newUser = new DiscordUser({
						username: profile.username,
						discordId: profile.id,
					});
					const newSavedUser = await newUser.save();
					return done(null, newSavedUser);
				}
				return done(null, findUser);
			} catch (err) {
				return done(err, null);
			}
		}
	)
);